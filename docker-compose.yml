version: "3.8"  # nurodome suderinamo docker-compose versiją
services:       # services yra konteinerių sąrašas
  dev:          # konfigūruojame konteinerį pavadinimu web
    # build komanda nudorome, kad iš kuriame kataloge (šiuo atveju iš esančio katalogo, .) esančio Dockerfile statyti konteinerį
    build: .
    # paveiksliuko (docker image) pavadinimas
    image: project:dev
    # konteinerio pavadinimas
    container_name: project.dev
    # parametras tty nurodo, ar konteineris gali naudotis linux subsistemos serijinės sąsajos TeleTYpewriter savybėmis, kurių iš esmės reikia komandinei eilutei funkcionuoti. Tuo pačiu atidarom ir stdin - komandinės eilutės įvedimo funkciją, kurią gali tekti prireikti naudoti pvz. su python input() funkcija.
    tty: true
    stdin_open: true
    # restart komanda nurodo sąlygas, kada perkrauti konteinerį jam išsijungus. Produkcinėje aplinkoje tai turėtų būti always. 
    restart: always
    # tinklo konfigūracija
    ports:
      - 8000:8000
    # volumes - disko sąsaja, kur konteineris sinchronizuos savo failus su realiais diske esančiais failais. Šių failų nereikės kopijuoti su cp. Taip pat panašiai sinchronizuosime ir `static` bei `media` katalogus su nginx konteineriu.
    volumes:
      - ./PinkRent:/app
    # priklausomybės - kurie konteineriai turėtu būti paleisti, paleidžiant šį konteinerį.
    depends_on:
      - db
    # pervadiname db konteinerio host lokaliame projekto tinkle. Nepamirškite duomenų bazės konfigūracijos faile nurodyti `host=postgres` vietoj `host=localhost`
    links:
      - db:postgres
    # vykdome komandas startuojant konteineriui, o ne konstruojant to konteinerio paveiksliuką (image). Rekomenduojame šias komandas iš Dockerfile pašalinti arba užkomentuoti.
    command: >
      bash -c "python wait_for_postgres.py &&
               python manage.py migrate &&
               python manage.py collectstatic --noinput &&
               gunicorn PinkRent.wsgi --bind 0.0.0.0:8000"
    # sukuriame naują duomenų bazės servisą
  db:
    # naudosime standartinį postgres image
    image: postgres
    # konteinerio pavadinimas
    container_name: project.db
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./dbdata:/var/lib/postgresql/data
    # nurodžius environment'e duomenų bazės parametrus, naujas postgres konteineris šiais parametrais sukurs tuščią duomenų bazę. Produkcinėje aplinkoje siūlytume nenurodyti jautrių duomenų šiame faile, o naudoti tarpinį .env failą, įdėtą į .gitignore.
    environment:
      POSTGRES_DB: project
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
  nginx:           # Nginx konteineris
    # surenkame nginx konteinerį su mūsų projekto .conf
    build: ./nginx/
    # savo surinkto nginx image paveiksliuko pavadinimas ir tagas
    image: nginx:project
    # konteinerio pavadinimas
    container_name: project.nginx
    # jeigu konteineris pakibtų, jį visada perkrausime
    restart: always
    # kokius portus atidaryti - jeigu reikia, įtraukite ir SSL
    ports:
      - 80:80
      - 443:443
    # nurodome tinklo sąsają su pagrindiniu projekto konteineriu `dev`.
    links:
      - dev:project
    # sinchronizuojame failus tarp konteinerio ir projekto `static` ir `media` katalogų. Šiuo atveju, netgi padarius `python manage.py collectstatic` iš projekto `dev` konteinerio, `nginx` konteineryje atitinkami failai taip pat atsinaujins.
    volumes:
      - ./PinkRent/media_root:/app/media
      - ./PinkRent/static_root:/app/static
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx